/** 
 	@page chapter_unittesting Unit Testing

	@author Jamoma, Timothy Place & Nathan Wolek

	@section chapter_unittesting_ruby Running Tests in Ruby

	To run a unit test, the easiest way to do it is in ruby.  
	In the [Jamoma/Core/DSP/Tests](https://github.com/jamoma/JamomaCore/tree/master/DSP/Tests/unit) folder, there is a simple example (<tt>gain.test.rb</tt>) which looks like this:

	@include ../../Core/DSP/Tests/unit/gain.test.rb

	The <tt>require</tt> statement loads the Jamoma Foundation.  
	The following line instantiates the #TTGain class.  
	Once we have an instance, we send it the test message to run the test.  
	You can run this ruby script in the terminal by typing <tt>'ruby gain.test.rb'</tt> and it will quickly return the results to you.

	@section chapter_unittesting_writingtests Writing Tests in C++

	Any object inheriting from #TTObjectBase will inherit a 'test' message.  
	#TTObjectBase defines a virtual default test method.  
	This test will be run unless you specify your own test method.  
	The default test method simply reports a failure because you haven't written a custom test.  
	To define your test method, you can use the following prototype (which is the same as for any message with arguments in Jamoma):

	@code{.cpp}
	virtual TTErr test(TTValue& returnedTestInfo);
	@endcode

	You can then implement a test with code such as the block that follows.
	A test may make 'assertions' that certain conditions be true.
	If any of these conditions are not true, then they are logged to the console and test will fail.

	@code{.cpp}
	TTErr TTGain::test(TTValue& returnedTestInfo)
	{
		// preliminary setup
	
		int	errorCount = 0;
		int testAssertionCount = 0;
	
		TTTestLog("Testing Parameter value conversions");
	
		// N test assertions
	
		// Test 1: trival value conversion
		this->set("midiGain", 100);
		TTTestAssertion("midi gain of 100 == linear gain of 1.", 
						TTTestFloatEquivalence(this->mGain, 1.0), 
						testAssertionCount, 
						errorCount);
	
		// Test 2: trival value conversion
		this->set("midiGain", 99);
		TTTestAssertion("midi gain of 99 != linear gain of 1.", 
						TTTestFloatEquivalence(this->mGain, 1.0, false), 
						testAssertionCount, 
						errorCount);
	
		// Test 3: audio test
		// set the input signals 1
		// apply -6 dB gain
		// check that the signals are properly scaled
		
		// create 1 channel audio signals
		TTAudio input(1);
		TTAudio output(1);
	
		input.allocWithVectorSize(64);
		output.allocWithVectorSize(64);
	
		for (int i=0; i<64; i++)
			input.rawSamples()[0][i] = 1.0;
	
		this->set("gain", -6.0);
		this->process(input, output);
	
		TTSampleValuePtr samples = output.rawSamples()[0];
		int validSampleCount = 0;
	
		for (int i=0; i<64; i++)
			validSampleCount += TTTestFloatEquivalence(0.5011872336272722, samples[i]);

		TTTestAssertion("accumulated audio error at gain = -6 dB", 
						validSampleCount == 64, 
						testAssertionCount, 
						errorCount);
		TTTestLog("Number of bad samples: %i", 64-validSampleCount);
	
		// Wrap up the test results to pass back to whoever called this test
		return TTTestFinish(testAssertionCount, errorCount, returnedTestInfo);
	}
	@endcode

*/
