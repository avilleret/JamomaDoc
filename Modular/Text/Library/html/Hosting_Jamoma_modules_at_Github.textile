<h2 class="LessonTitle" class="myClass">Hosting Jamoma modules at Github</h2>
<p>So you developed some fabulous modules that you would like to put under <a href="http://git-scm.com/">Git</a> <a href="http://en.wikipedia.org/wiki/Revision_control">version control</a>, whether it is to keep history of all changes you made, to have a backup of your files or just because you feel it is fun. Here for the sake of the example, we will look into hosting your sources to <a href="http://www.github.com">Github</a> where all Jamoma source reside. However, following these steps will also gets you to the tracks for hosting your work at other hosting site or on your personnal server.</p>
<p><img src="images/add_repo_to_Github.png" alt="" /></p>
<h3 class="StepTitle" class="myClass"><span class="StepNumber">1</span> Create a repository at Github</h3>
<p>Once logged in to Github with your personnal account, go to the <span class="samp"><a href="https://github.com/dashboard/yours">Dashboard</a></span> page <span class="seq">1</span> and click the <span class="samp"><a href="http://github.com/repositories/new">New Repository</a></span> button <span class="seq">2</span>.</p>
<p>Now you need to set up  the name of your project <span class="seq">1</span>, a short description <span class="seq">2</span> and optionally a url <span class="seq">3</span> leading to your site. All these informations will be displayed on your project page. When all fields are completed, click the <span class="samp">Create Repository</span>.<br />
<img src="images/Create_a_repository_at_Github.png" alt="" /></p>
<p>When done, Github should get you to your project page. From here, copy your project Git url (i.e @git@github.com:username/yourProject.git@) that you will use to clone the project on your computer.<br />
<img src="images/Create_a_repository_at_Github_2_.png" alt="" /></p>
<p><img src="images/Create_a_repository_at_Github_3_.png" alt="" /></p>
<h3 class="StepTitle" class="myClass"><span class="StepNumber">2</span> Put your project under Git control</h3>
<p>If you have not yet done so, create a folder on your computer where you want to store your project. Here we create a folder named <em>myUserLib</em> on the Desktop.</p>
<p><img src="images/Put_project_under_Git_control_1.png" alt="" /></p>
<p><img src="images/Put_project_under_Git_control_2.png" alt="" /></p>
<p>Open Terminal.app (which resides in Applications/Utilities/, under <span class="caps">OSX</span>), then from the command line, type the following to go to that folder :<br />
<code>cd /path/to/myUserLib</code> (where &#8220;/path/to/myUserLib&#8221; is the path leading to the folder where you created your project).</p>
<p><img src="images/Put_project_under_Git_control_3.png" alt="" /></p>
<blockquote>
<p>If you are not comfortable with the command line, note that under <span class="caps">OSX</span>, you can type @cd @ and drag the folder on the Terminal window.</p>
</blockquote>
<p>Now you need to set your project folder as a Git local repository. To do so, type :</p>
<pre><code>git init</code></pre>
<p><img src="images/Put_project_under_Git_control_4.png" alt="" /></p>
<p>Switch to the Finder or File Explorer and drag and copy your project files in your Git repository. Here, we copy the folder <em>myFabulousModule</em> and its contained files (Max patch, .html documentation and .xml preset file).</p>
<p><img src="images/Put_project_under_Git_control_5.png" alt="" /></p>
<p>Although we copied our files into the folder, we need to specify Git to <a href="http://www.kernel.org/pub/software/scm/git/docs/git-add.html">add</a> these files under revision control. We do this be running the <code>git add</code> command. The <code>--all</code> option as shown in the illustration below, allows to add all files contained in the <em>UserLib</em> folder.</p>
<p><img src="images/Put_project_under_Git_control_6.png" alt="" /></p>
<p>Now we can store the current content in a new <a href="http://www.kernel.org/pub/software/scm/git/docs/git-commit.html">commit</a>, using the command <code>git commit</code>. We will also add a log message using the <code>-m</code> option follow by a message under quotes to describe the changes.</p>
<p><img src="images/Put_project_under_Git_control_7.png" alt="" /></p>
<p>We now need to add a <a href="http://www.kernel.org/pub/software/scm/git/docs/git-remote.html">remote</a> for the repository at Github. Run the following command to do so:</p>
<pre><code>git remote add origin git@github:username/yourProject.git</code></pre>
<p><img src="images/Put_project_under_Git_control_8.png" alt="" /></p>
<p>Finally, we can now <a href="http://www.kernel.org/pub/software/scm/git/docs/git-push.html">update</a> the remote repository with the changes:</p>
<pre><code>git push origin HEAD</code></pre>
<p><img src="images/Put_project_under_Git_control_9.png" alt="" /></p>
